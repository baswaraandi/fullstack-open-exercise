import { useState, useEffect } from "react";
import axios from "axios";
import Note from "./components/Note.jsx";
import noteService from "./services/note.js";

const App = () => {
  const [persons, setPersons] = useState([]);
  const [newName, setNewName] = useState("");
  const [newNumber, setNewNumber] = useState("");
  const [filter, setFilter] = useState("");
  const [showAll, setShowAll] = useState(false);
  const [addMessage, setaddMessage] = useState('Error ....');
  const [deleteMessage, setdeleteMessage] = useState('Error ....');

  const fetchData = async () => {
    try {
      const response = await axios.get("http://localhost:3001/notes"); // Ganti dengan URL yang sesuai
      setPersons(response.data);
    } catch (error) {
      console.error("Error fetching data:", error);
    }
  };

  // Panggil fetchData saat komponen dimuat
  useEffect(() => {
    fetchData();
  }, []);

  const handleNameChange = (event) => {
    setNewName(event.target.value);
  };

  const handleNumberChange = (event) => {
    setNewNumber(event.target.value);
  };

  const handleFilterChange = (event) => {
    setFilter(event.target.value);
  };

  const addPerson = async (event) => {
    event.preventDefault();

    const isDuplicate = persons.some((person) => person.name === newName);

    if (isDuplicate) {
      window.alert(newName + " sudah ada di db");
    } else {
      const newPerson = {
        name: newName,
        number: newNumber,
      };
      try {
        const response = await axios.post(
          "http://localhost:3001/notes",
          newPerson
        );
        setPersons([...persons, response.data]);
        setNewNumber("");
        setNewName("");
        window.alert(newName + " ditambahkan ke db");
      } catch (error) {
        console.error("Error adding person: ", error);
      }
    }
  };

  const deletePerson = async (id) => {
    const personToDelete = persons.find((person) => person.id === id)

    if (window.confirm("Apakah ingin menghapus " + personToDelete.name)) {
      try {
        await axios.delete(`http://localhost:3001/notes/${id}`);
        setPersons(persons.filter((person) => person.id !== id));
        window.alert(personToDelete.name + " dihapus dari db");
      } catch (error) {
        console.error("Error deleting person: ", error);
      }
    }
  };

  const filteredPersons = filter
    ? persons.filter((person) =>
        person.name.toLowerCase().includes(filter.toLowerCase())
      )
    : persons;

  return (
    <div>
      <h2>Phonebook</h2>
      <div>
        Filter shown with:{" "}
        <input value={filter} onChange={handleFilterChange} />{" "}
      </div>
      <h3>Add a new</h3>
      <form onSubmit={addPerson}>
        <div>
          name: <input value={newName} onChange={handleNameChange} />
          <br></br>
          number: <input value={newNumber} onChange={handleNumberChange} />
        </div>
        <div>
          <button type="submit">add</button>
        </div>
      </form>
      <h2>Numbers</h2>
      <ul>
        {filteredPersons.map((note) => (
          <div key={note.id}>
            <Note note={note} />
            <button onClick={() => deletePerson(note.id)}>delete</button>
          </div>
        ))}
      </ul>
    </div>
  );
};

export default App;
